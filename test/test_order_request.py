# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.order_request import OrderRequest

class TestOrderRequest(unittest.TestCase):
    """OrderRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderRequest:
        """Test OrderRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderRequest`
        """
        model = OrderRequest()
        if include_optional:
            return OrderRequest(
                session = 'NORMAL',
                duration = 'DAY',
                order_type = 'MARKET',
                cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                complex_order_strategy_type = 'NONE',
                quantity = 1.337,
                filled_quantity = 1.337,
                remaining_quantity = 1.337,
                destination_link_name = '',
                release_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                stop_price = 1.337,
                stop_price_link_basis = 'MANUAL',
                stop_price_link_type = 'VALUE',
                stop_price_offset = 1.337,
                stop_type = 'STANDARD',
                price_link_basis = 'MANUAL',
                price_link_type = 'VALUE',
                price = 1.337,
                tax_lot_method = 'FIFO',
                order_leg_collection = [
                    openapi_client.models.order_leg_collection.OrderLegCollection(
                        order_leg_type = 'EQUITY', 
                        leg_id = 56, 
                        instrument = null, 
                        instruction = 'BUY', 
                        position_effect = 'OPENING', 
                        quantity = 1.337, 
                        quantity_type = 'ALL_SHARES', 
                        div_cap_gains = 'REINVEST', 
                        to_symbol = '', )
                    ],
                activation_price = 1.337,
                special_instruction = 'ALL_OR_NONE',
                order_strategy_type = 'SINGLE',
                order_id = 56,
                cancelable = True,
                editable = True,
                status = 'AWAITING_PARENT_ORDER',
                entered_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                account_number = 56,
                order_activity_collection = [
                    openapi_client.models.order_activity.OrderActivity(
                        execution_type = 'FILL', 
                        quantity = 1.337, 
                        order_remaining_quantity = 1.337, 
                        execution_legs = [
                            openapi_client.models.execution_leg.ExecutionLeg(
                                leg_id = 56, 
                                price = 1.337, 
                                quantity = 1.337, 
                                mismarked_quantity = 1.337, 
                                instrument_id = 56, 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                replacing_order_collection = [
                    openapi_client.models.order_request.OrderRequest(
                        session = 'NORMAL', 
                        duration = 'DAY', 
                        order_type = 'MARKET', 
                        cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        complex_order_strategy_type = 'NONE', 
                        quantity = 1.337, 
                        filled_quantity = 1.337, 
                        remaining_quantity = 1.337, 
                        destination_link_name = '', 
                        release_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        stop_price = 1.337, 
                        stop_price_link_basis = 'MANUAL', 
                        stop_price_link_type = 'VALUE', 
                        stop_price_offset = 1.337, 
                        stop_type = 'STANDARD', 
                        price_link_basis = 'MANUAL', 
                        price_link_type = 'VALUE', 
                        price = 1.337, 
                        tax_lot_method = 'FIFO', 
                        order_leg_collection = [
                            openapi_client.models.order_leg_collection.OrderLegCollection(
                                order_leg_type = 'EQUITY', 
                                leg_id = 56, 
                                instrument = null, 
                                instruction = 'BUY', 
                                position_effect = 'OPENING', 
                                quantity = 1.337, 
                                quantity_type = 'ALL_SHARES', 
                                div_cap_gains = 'REINVEST', 
                                to_symbol = '', )
                            ], 
                        activation_price = 1.337, 
                        special_instruction = 'ALL_OR_NONE', 
                        order_strategy_type = 'SINGLE', 
                        order_id = 56, 
                        cancelable = True, 
                        editable = True, 
                        status = 'AWAITING_PARENT_ORDER', 
                        entered_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        account_number = 56, 
                        order_activity_collection = [
                            openapi_client.models.order_activity.OrderActivity(
                                execution_type = 'FILL', 
                                quantity = 1.337, 
                                order_remaining_quantity = 1.337, 
                                execution_legs = [
                                    openapi_client.models.execution_leg.ExecutionLeg(
                                        leg_id = 56, 
                                        price = 1.337, 
                                        quantity = 1.337, 
                                        mismarked_quantity = 1.337, 
                                        instrument_id = 56, 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], )
                            ], 
                        replacing_order_collection = [
                            openapi_client.models.order_request.OrderRequest(
                                cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                quantity = 1.337, 
                                filled_quantity = 1.337, 
                                remaining_quantity = 1.337, 
                                destination_link_name = '', 
                                release_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                stop_price = 1.337, 
                                stop_price_offset = 1.337, 
                                price = 1.337, 
                                activation_price = 1.337, 
                                order_id = 56, 
                                cancelable = True, 
                                editable = True, 
                                entered_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                account_number = 56, 
                                child_order_strategies = [
                                    
                                    ], 
                                status_description = '', )
                            ], 
                        child_order_strategies = [
                            
                            ], 
                        status_description = '', )
                    ],
                child_order_strategies = [
                    openapi_client.models.order_request.OrderRequest(
                        session = 'NORMAL', 
                        duration = 'DAY', 
                        order_type = 'MARKET', 
                        cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        complex_order_strategy_type = 'NONE', 
                        quantity = 1.337, 
                        filled_quantity = 1.337, 
                        remaining_quantity = 1.337, 
                        destination_link_name = '', 
                        release_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        stop_price = 1.337, 
                        stop_price_link_basis = 'MANUAL', 
                        stop_price_link_type = 'VALUE', 
                        stop_price_offset = 1.337, 
                        stop_type = 'STANDARD', 
                        price_link_basis = 'MANUAL', 
                        price_link_type = 'VALUE', 
                        price = 1.337, 
                        tax_lot_method = 'FIFO', 
                        order_leg_collection = [
                            openapi_client.models.order_leg_collection.OrderLegCollection(
                                order_leg_type = 'EQUITY', 
                                leg_id = 56, 
                                instrument = null, 
                                instruction = 'BUY', 
                                position_effect = 'OPENING', 
                                quantity = 1.337, 
                                quantity_type = 'ALL_SHARES', 
                                div_cap_gains = 'REINVEST', 
                                to_symbol = '', )
                            ], 
                        activation_price = 1.337, 
                        special_instruction = 'ALL_OR_NONE', 
                        order_strategy_type = 'SINGLE', 
                        order_id = 56, 
                        cancelable = True, 
                        editable = True, 
                        status = 'AWAITING_PARENT_ORDER', 
                        entered_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        account_number = 56, 
                        order_activity_collection = [
                            openapi_client.models.order_activity.OrderActivity(
                                execution_type = 'FILL', 
                                quantity = 1.337, 
                                order_remaining_quantity = 1.337, 
                                execution_legs = [
                                    openapi_client.models.execution_leg.ExecutionLeg(
                                        leg_id = 56, 
                                        price = 1.337, 
                                        quantity = 1.337, 
                                        mismarked_quantity = 1.337, 
                                        instrument_id = 56, 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], )
                            ], 
                        replacing_order_collection = [
                            openapi_client.models.order_request.OrderRequest(
                                cancel_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                quantity = 1.337, 
                                filled_quantity = 1.337, 
                                remaining_quantity = 1.337, 
                                destination_link_name = '', 
                                release_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                stop_price = 1.337, 
                                stop_price_offset = 1.337, 
                                price = 1.337, 
                                activation_price = 1.337, 
                                order_id = 56, 
                                cancelable = True, 
                                editable = True, 
                                entered_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                account_number = 56, 
                                status_description = '', )
                            ], 
                        status_description = '', )
                    ],
                status_description = ''
            )
        else:
            return OrderRequest(
        )
        """

    def testOrderRequest(self):
        """Test OrderRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
