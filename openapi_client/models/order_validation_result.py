# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_validation_detail import OrderValidationDetail
from typing import Optional, Set
from typing_extensions import Self

class OrderValidationResult(BaseModel):
    """
    OrderValidationResult
    """ # noqa: E501
    alerts: Optional[List[OrderValidationDetail]] = None
    accepts: Optional[List[OrderValidationDetail]] = None
    rejects: Optional[List[OrderValidationDetail]] = None
    reviews: Optional[List[OrderValidationDetail]] = None
    warns: Optional[List[OrderValidationDetail]] = None
    __properties: ClassVar[List[str]] = ["alerts", "accepts", "rejects", "reviews", "warns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderValidationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alerts (list)
        _items = []
        if self.alerts:
            for _item_alerts in self.alerts:
                if _item_alerts:
                    _items.append(_item_alerts.to_dict())
            _dict['alerts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in accepts (list)
        _items = []
        if self.accepts:
            for _item_accepts in self.accepts:
                if _item_accepts:
                    _items.append(_item_accepts.to_dict())
            _dict['accepts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejects (list)
        _items = []
        if self.rejects:
            for _item_rejects in self.rejects:
                if _item_rejects:
                    _items.append(_item_rejects.to_dict())
            _dict['rejects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviews (list)
        _items = []
        if self.reviews:
            for _item_reviews in self.reviews:
                if _item_reviews:
                    _items.append(_item_reviews.to_dict())
            _dict['reviews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warns (list)
        _items = []
        if self.warns:
            for _item_warns in self.warns:
                if _item_warns:
                    _items.append(_item_warns.to_dict())
            _dict['warns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderValidationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alerts": [OrderValidationDetail.from_dict(_item) for _item in obj["alerts"]] if obj.get("alerts") is not None else None,
            "accepts": [OrderValidationDetail.from_dict(_item) for _item in obj["accepts"]] if obj.get("accepts") is not None else None,
            "rejects": [OrderValidationDetail.from_dict(_item) for _item in obj["rejects"]] if obj.get("rejects") is not None else None,
            "reviews": [OrderValidationDetail.from_dict(_item) for _item in obj["reviews"]] if obj.get("reviews") is not None else None,
            "warns": [OrderValidationDetail.from_dict(_item) for _item in obj["warns"]] if obj.get("warns") is not None else None
        })
        return _obj


