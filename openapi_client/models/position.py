# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Position(BaseModel):
    """
    Position
    """ # noqa: E501
    short_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shortQuantity")
    average_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averagePrice")
    current_day_profit_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentDayProfitLoss")
    current_day_profit_loss_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentDayProfitLossPercentage")
    long_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="longQuantity")
    settled_long_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="settledLongQuantity")
    settled_short_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="settledShortQuantity")
    aged_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="agedQuantity")
    instrument: Optional[Any] = None
    market_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="marketValue")
    maintenance_requirement: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maintenanceRequirement")
    average_long_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageLongPrice")
    average_short_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageShortPrice")
    tax_lot_average_long_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxLotAverageLongPrice")
    tax_lot_average_short_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxLotAverageShortPrice")
    long_open_profit_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="longOpenProfitLoss")
    short_open_profit_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shortOpenProfitLoss")
    previous_session_long_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="previousSessionLongQuantity")
    previous_session_short_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="previousSessionShortQuantity")
    current_day_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentDayCost")
    __properties: ClassVar[List[str]] = ["shortQuantity", "averagePrice", "currentDayProfitLoss", "currentDayProfitLossPercentage", "longQuantity", "settledLongQuantity", "settledShortQuantity", "agedQuantity", "instrument", "marketValue", "maintenanceRequirement", "averageLongPrice", "averageShortPrice", "taxLotAverageLongPrice", "taxLotAverageShortPrice", "longOpenProfitLoss", "shortOpenProfitLoss", "previousSessionLongQuantity", "previousSessionShortQuantity", "currentDayCost"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Position from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if instrument (nullable) is None
        # and model_fields_set contains the field
        if self.instrument is None and "instrument" in self.model_fields_set:
            _dict['instrument'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Position from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shortQuantity": obj.get("shortQuantity"),
            "averagePrice": obj.get("averagePrice"),
            "currentDayProfitLoss": obj.get("currentDayProfitLoss"),
            "currentDayProfitLossPercentage": obj.get("currentDayProfitLossPercentage"),
            "longQuantity": obj.get("longQuantity"),
            "settledLongQuantity": obj.get("settledLongQuantity"),
            "settledShortQuantity": obj.get("settledShortQuantity"),
            "agedQuantity": obj.get("agedQuantity"),
            "instrument": obj.get("instrument"),
            "marketValue": obj.get("marketValue"),
            "maintenanceRequirement": obj.get("maintenanceRequirement"),
            "averageLongPrice": obj.get("averageLongPrice"),
            "averageShortPrice": obj.get("averageShortPrice"),
            "taxLotAverageLongPrice": obj.get("taxLotAverageLongPrice"),
            "taxLotAverageShortPrice": obj.get("taxLotAverageShortPrice"),
            "longOpenProfitLoss": obj.get("longOpenProfitLoss"),
            "shortOpenProfitLoss": obj.get("shortOpenProfitLoss"),
            "previousSessionLongQuantity": obj.get("previousSessionLongQuantity"),
            "previousSessionShortQuantity": obj.get("previousSessionShortQuantity"),
            "currentDayCost": obj.get("currentDayCost")
        })
        return _obj


