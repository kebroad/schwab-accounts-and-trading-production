# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.amount_indicator import AmountIndicator
from openapi_client.models.api_order_status import ApiOrderStatus
from openapi_client.models.complex_order_strategy_type import ComplexOrderStrategyType
from openapi_client.models.duration import Duration
from openapi_client.models.order_balance import OrderBalance
from openapi_client.models.order_leg import OrderLeg
from openapi_client.models.order_strategy_type import OrderStrategyType
from openapi_client.models.order_type import OrderType
from openapi_client.models.session import Session
from openapi_client.models.settlement_instruction import SettlementInstruction
from typing import Optional, Set
from typing_extensions import Self

class OrderStrategy(BaseModel):
    """
    OrderStrategy
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    advanced_order_type: Optional[StrictStr] = Field(default=None, alias="advancedOrderType")
    close_time: Optional[datetime] = Field(default=None, alias="closeTime")
    entered_time: Optional[datetime] = Field(default=None, alias="enteredTime")
    order_balance: Optional[OrderBalance] = Field(default=None, alias="orderBalance")
    order_strategy_type: Optional[OrderStrategyType] = Field(default=None, alias="orderStrategyType")
    order_version: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="orderVersion")
    session: Optional[Session] = None
    status: Optional[ApiOrderStatus] = None
    all_or_none: Optional[StrictBool] = Field(default=None, alias="allOrNone")
    discretionary: Optional[StrictBool] = None
    duration: Optional[Duration] = None
    filled_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="filledQuantity")
    order_type: Optional[OrderType] = Field(default=None, alias="orderType")
    order_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="orderValue")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    remaining_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="remainingQuantity")
    sell_non_marginable_first: Optional[StrictBool] = Field(default=None, alias="sellNonMarginableFirst")
    settlement_instruction: Optional[SettlementInstruction] = Field(default=None, alias="settlementInstruction")
    strategy: Optional[ComplexOrderStrategyType] = None
    amount_indicator: Optional[AmountIndicator] = Field(default=None, alias="amountIndicator")
    order_legs: Optional[List[OrderLeg]] = Field(default=None, alias="orderLegs")
    __properties: ClassVar[List[str]] = ["accountNumber", "advancedOrderType", "closeTime", "enteredTime", "orderBalance", "orderStrategyType", "orderVersion", "session", "status", "allOrNone", "discretionary", "duration", "filledQuantity", "orderType", "orderValue", "price", "quantity", "remainingQuantity", "sellNonMarginableFirst", "settlementInstruction", "strategy", "amountIndicator", "orderLegs"]

    @field_validator('advanced_order_type')
    def advanced_order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'OTO', 'OCO', 'OTOCO', 'OT2OCO', 'OT3OCO', 'BLAST_ALL', 'OTA', 'PAIR']):
            raise ValueError("must be one of enum values ('NONE', 'OTO', 'OCO', 'OTOCO', 'OT2OCO', 'OT3OCO', 'BLAST_ALL', 'OTA', 'PAIR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order_balance
        if self.order_balance:
            _dict['orderBalance'] = self.order_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_legs (list)
        _items = []
        if self.order_legs:
            for _item_order_legs in self.order_legs:
                if _item_order_legs:
                    _items.append(_item_order_legs.to_dict())
            _dict['orderLegs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "advancedOrderType": obj.get("advancedOrderType"),
            "closeTime": obj.get("closeTime"),
            "enteredTime": obj.get("enteredTime"),
            "orderBalance": OrderBalance.from_dict(obj["orderBalance"]) if obj.get("orderBalance") is not None else None,
            "orderStrategyType": obj.get("orderStrategyType"),
            "orderVersion": obj.get("orderVersion"),
            "session": obj.get("session"),
            "status": obj.get("status"),
            "allOrNone": obj.get("allOrNone"),
            "discretionary": obj.get("discretionary"),
            "duration": obj.get("duration"),
            "filledQuantity": obj.get("filledQuantity"),
            "orderType": obj.get("orderType"),
            "orderValue": obj.get("orderValue"),
            "price": obj.get("price"),
            "quantity": obj.get("quantity"),
            "remainingQuantity": obj.get("remainingQuantity"),
            "sellNonMarginableFirst": obj.get("sellNonMarginableFirst"),
            "settlementInstruction": obj.get("settlementInstruction"),
            "strategy": obj.get("strategy"),
            "amountIndicator": obj.get("amountIndicator"),
            "orderLegs": [OrderLeg.from_dict(_item) for _item in obj["orderLegs"]] if obj.get("orderLegs") is not None else None
        })
        return _obj


