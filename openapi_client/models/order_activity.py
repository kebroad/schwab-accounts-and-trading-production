# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.execution_leg import ExecutionLeg
from typing import Optional, Set
from typing_extensions import Self

class OrderActivity(BaseModel):
    """
    OrderActivity
    """ # noqa: E501
    activity_type: Optional[StrictStr] = Field(default=None, alias="activityType")
    execution_type: Optional[StrictStr] = Field(default=None, alias="executionType")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    order_remaining_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="orderRemainingQuantity")
    execution_legs: Optional[List[ExecutionLeg]] = Field(default=None, alias="executionLegs")
    __properties: ClassVar[List[str]] = ["activityType", "executionType", "quantity", "orderRemainingQuantity", "executionLegs"]

    @field_validator('activity_type')
    def activity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION', 'ORDER_ACTION']):
            raise ValueError("must be one of enum values ('EXECUTION', 'ORDER_ACTION')")
        return value

    @field_validator('execution_type')
    def execution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILL']):
            raise ValueError("must be one of enum values ('FILL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in execution_legs (list)
        _items = []
        if self.execution_legs:
            for _item_execution_legs in self.execution_legs:
                if _item_execution_legs:
                    _items.append(_item_execution_legs.to_dict())
            _dict['executionLegs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityType": obj.get("activityType"),
            "executionType": obj.get("executionType"),
            "quantity": obj.get("quantity"),
            "orderRemainingQuantity": obj.get("orderRemainingQuantity"),
            "executionLegs": [ExecutionLeg.from_dict(_item) for _item in obj["executionLegs"]] if obj.get("executionLegs") is not None else None
        })
        return _obj


