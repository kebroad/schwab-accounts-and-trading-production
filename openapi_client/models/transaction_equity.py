# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TransactionEquity(BaseModel):
    """
    TransactionEquity
    """ # noqa: E501
    type: Optional[StrictStr] = None
    asset_type: StrictStr = Field(alias="assetType")
    cusip: Optional[StrictStr] = None
    symbol: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    instrument_id: Optional[StrictInt] = Field(default=None, alias="instrumentId")
    net_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="netChange")
    __properties: ClassVar[List[str]] = ["assetType", "cusip", "symbol", "description", "instrumentId", "netChange"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMON_STOCK', 'PREFERRED_STOCK', 'DEPOSITORY_RECEIPT', 'PREFERRED_DEPOSITORY_RECEIPT', 'RESTRICTED_STOCK', 'COMPONENT_UNIT', 'RIGHT', 'WARRANT', 'CONVERTIBLE_PREFERRED_STOCK', 'CONVERTIBLE_STOCK', 'LIMITED_PARTNERSHIP', 'WHEN_ISSUED', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('COMMON_STOCK', 'PREFERRED_STOCK', 'DEPOSITORY_RECEIPT', 'PREFERRED_DEPOSITORY_RECEIPT', 'RESTRICTED_STOCK', 'COMPONENT_UNIT', 'RIGHT', 'WARRANT', 'CONVERTIBLE_PREFERRED_STOCK', 'CONVERTIBLE_STOCK', 'LIMITED_PARTNERSHIP', 'WHEN_ISSUED', 'UNKNOWN')")
        return value

    @field_validator('asset_type')
    def asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EQUITY', 'OPTION', 'INDEX', 'MUTUAL_FUND', 'CASH_EQUIVALENT', 'FIXED_INCOME', 'CURRENCY', 'COLLECTIVE_INVESTMENT']):
            raise ValueError("must be one of enum values ('EQUITY', 'OPTION', 'INDEX', 'MUTUAL_FUND', 'CASH_EQUIVALENT', 'FIXED_INCOME', 'CURRENCY', 'COLLECTIVE_INVESTMENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionEquity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionEquity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetType": obj.get("assetType"),
            "cusip": obj.get("cusip"),
            "symbol": obj.get("symbol"),
            "description": obj.get("description"),
            "instrumentId": obj.get("instrumentId"),
            "netChange": obj.get("netChange")
        })
        return _obj


