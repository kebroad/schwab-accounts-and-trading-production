# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.transaction_type import TransactionType
from openapi_client.models.transfer_item import TransferItem
from openapi_client.models.user_details import UserDetails
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Transaction
    """ # noqa: E501
    activity_id: Optional[StrictInt] = Field(default=None, alias="activityId")
    time: Optional[datetime] = None
    user: Optional[UserDetails] = None
    description: Optional[StrictStr] = None
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    type: Optional[TransactionType] = None
    status: Optional[StrictStr] = None
    sub_account: Optional[StrictStr] = Field(default=None, alias="subAccount")
    trade_date: Optional[datetime] = Field(default=None, alias="tradeDate")
    settlement_date: Optional[datetime] = Field(default=None, alias="settlementDate")
    position_id: Optional[StrictInt] = Field(default=None, alias="positionId")
    order_id: Optional[StrictInt] = Field(default=None, alias="orderId")
    net_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="netAmount")
    activity_type: Optional[StrictStr] = Field(default=None, alias="activityType")
    transfer_items: Optional[List[TransferItem]] = Field(default=None, alias="transferItems")
    __properties: ClassVar[List[str]] = ["activityId", "time", "user", "description", "accountNumber", "type", "status", "subAccount", "tradeDate", "settlementDate", "positionId", "orderId", "netAmount", "activityType", "transferItems"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALID', 'INVALID', 'PENDING', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('VALID', 'INVALID', 'PENDING', 'UNKNOWN')")
        return value

    @field_validator('sub_account')
    def sub_account_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CASH', 'MARGIN', 'SHORT', 'DIV', 'INCOME', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('CASH', 'MARGIN', 'SHORT', 'DIV', 'INCOME', 'UNKNOWN')")
        return value

    @field_validator('activity_type')
    def activity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVITY_CORRECTION', 'EXECUTION', 'ORDER_ACTION', 'TRANSFER', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('ACTIVITY_CORRECTION', 'EXECUTION', 'ORDER_ACTION', 'TRANSFER', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transfer_items (list)
        _items = []
        if self.transfer_items:
            for _item_transfer_items in self.transfer_items:
                if _item_transfer_items:
                    _items.append(_item_transfer_items.to_dict())
            _dict['transferItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityId": obj.get("activityId"),
            "time": obj.get("time"),
            "user": UserDetails.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "description": obj.get("description"),
            "accountNumber": obj.get("accountNumber"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "subAccount": obj.get("subAccount"),
            "tradeDate": obj.get("tradeDate"),
            "settlementDate": obj.get("settlementDate"),
            "positionId": obj.get("positionId"),
            "orderId": obj.get("orderId"),
            "netAmount": obj.get("netAmount"),
            "activityType": obj.get("activityType"),
            "transferItems": [TransferItem.from_dict(_item) for _item in obj["transferItems"]] if obj.get("transferItems") is not None else None
        })
        return _obj


