# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.margin_balance import MarginBalance

class TestMarginBalance(unittest.TestCase):
    """MarginBalance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MarginBalance:
        """Test MarginBalance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MarginBalance`
        """
        model = MarginBalance()
        if include_optional:
            return MarginBalance(
                available_funds = 1.337,
                available_funds_non_marginable_trade = 1.337,
                buying_power = 1.337,
                buying_power_non_marginable_trade = 1.337,
                day_trading_buying_power = 1.337,
                day_trading_buying_power_call = 1.337,
                equity = 1.337,
                equity_percentage = 1.337,
                long_margin_value = 1.337,
                maintenance_call = 1.337,
                maintenance_requirement = 1.337,
                margin_balance = 1.337,
                reg_t_call = 1.337,
                short_balance = 1.337,
                short_margin_value = 1.337,
                sma = 1.337,
                is_in_call = 1.337,
                stock_buying_power = 1.337,
                option_buying_power = 1.337
            )
        else:
            return MarginBalance(
        )
        """

    def testMarginBalance(self):
        """Test MarginBalance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
