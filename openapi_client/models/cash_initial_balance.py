# coding: utf-8

"""
    Trader API - Account Access and User Preferences

    Schwab Trader API access to Account, Order entry and User Preferences

    The version of the OpenAPI document: 1.0.0
    Contact: TraderAPI@Schwab.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CashInitialBalance(BaseModel):
    """
    CashInitialBalance
    """ # noqa: E501
    accrued_interest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="accruedInterest")
    cash_available_for_trading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cashAvailableForTrading")
    cash_available_for_withdrawal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cashAvailableForWithdrawal")
    cash_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cashBalance")
    bond_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="bondValue")
    cash_receipts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cashReceipts")
    liquidation_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="liquidationValue")
    long_option_market_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="longOptionMarketValue")
    long_stock_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="longStockValue")
    money_market_fund: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="moneyMarketFund")
    mutual_fund_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mutualFundValue")
    short_option_market_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shortOptionMarketValue")
    short_stock_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shortStockValue")
    is_in_call: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="isInCall")
    unsettled_cash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unsettledCash")
    cash_debit_call_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cashDebitCallValue")
    pending_deposits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="pendingDeposits")
    account_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="accountValue")
    __properties: ClassVar[List[str]] = ["accruedInterest", "cashAvailableForTrading", "cashAvailableForWithdrawal", "cashBalance", "bondValue", "cashReceipts", "liquidationValue", "longOptionMarketValue", "longStockValue", "moneyMarketFund", "mutualFundValue", "shortOptionMarketValue", "shortStockValue", "isInCall", "unsettledCash", "cashDebitCallValue", "pendingDeposits", "accountValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CashInitialBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CashInitialBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accruedInterest": obj.get("accruedInterest"),
            "cashAvailableForTrading": obj.get("cashAvailableForTrading"),
            "cashAvailableForWithdrawal": obj.get("cashAvailableForWithdrawal"),
            "cashBalance": obj.get("cashBalance"),
            "bondValue": obj.get("bondValue"),
            "cashReceipts": obj.get("cashReceipts"),
            "liquidationValue": obj.get("liquidationValue"),
            "longOptionMarketValue": obj.get("longOptionMarketValue"),
            "longStockValue": obj.get("longStockValue"),
            "moneyMarketFund": obj.get("moneyMarketFund"),
            "mutualFundValue": obj.get("mutualFundValue"),
            "shortOptionMarketValue": obj.get("shortOptionMarketValue"),
            "shortStockValue": obj.get("shortStockValue"),
            "isInCall": obj.get("isInCall"),
            "unsettledCash": obj.get("unsettledCash"),
            "cashDebitCallValue": obj.get("cashDebitCallValue"),
            "pendingDeposits": obj.get("pendingDeposits"),
            "accountValue": obj.get("accountValue")
        })
        return _obj


